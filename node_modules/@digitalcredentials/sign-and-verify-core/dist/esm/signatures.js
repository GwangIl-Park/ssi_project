export const DefaultProofPurpose = 'assertionMethod';
const SecurityPrefix = 'https://w3id.org/security';
export class SignatureOptions {
    constructor(options) {
        this.proofPurpose = DefaultProofPurpose;
        Object.assign(this, options);
    }
}
// Added to work around confusing naming schemes. Later, there may be some layer of indirection
// but for now, it's just the verificationMethod for our use cases.
export function getSigningKeyIdentifier(options) {
    return options.verificationMethod;
}
;
export function getSigningDate(options) {
    return options.created ? options.created : new Date().toISOString();
}
;
export function getProofProperty(vpProof, property) {
    let propValue = null;
    if (vpProof.hasOwnProperty(property)) {
        propValue = vpProof[property];
    }
    else if (vpProof.hasOwnProperty(`${SecurityPrefix}#${property}`)) {
        propValue = vpProof[`${SecurityPrefix}#${property}`];
    }
    else {
        throw new Error(`Invalid proof property ${property}`);
    }
    if (propValue.hasOwnProperty('id')) {
        return propValue.id;
    }
    return propValue;
}
//# sourceMappingURL=signatures.js.map