var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { contexts as ldContexts, documentLoaderFactory } from '@transmute/jsonld-document-loader';
import dccCtx from '@digitalcredentials/dcc-context';
import obCtx from '@digitalcredentials/open-badges-context';
const didContext = require('@digitalcredentials/did-context');
const ed25519 = require('ed25519-signature-2020-context');
const x25519Ctx = require('x25519-key-agreement-2020-context');
export function getController(fullDid) {
    return fullDid.split('#')[0];
}
export function getCustomLoader() {
    const customLoaderProto = documentLoaderFactory.pluginFactory
        .build({
        contexts: Object.assign(Object.assign(Object.assign({}, ldContexts.W3C_Verifiable_Credentials), ldContexts.W3ID_Security_Vocabulary), ldContexts.W3C_Decentralized_Identifiers),
    })
        .addContext({ [ed25519.constants.CONTEXT_URL]: ed25519.contexts.get(ed25519.constants.CONTEXT_URL) })
        .addContext({ [didContext.constants.DID_CONTEXT_URL]: didContext.contexts.get(didContext.constants.DID_CONTEXT_URL) })
        .addContext({ [dccCtx.CONTEXT_URL_V1]: dccCtx.CONTEXT_V1 })
        // Open Badges v3 Context (with multiple URL aliases)
        .addContext({ [obCtx.CONTEXT_URL_V3]: obCtx.CONTEXT_V3 })
        .addContext({ [obCtx.constants.CONTEXT_URL_V3_JFF_V1]: obCtx.CONTEXT_V3 })
        .addContext({ [obCtx.constants.CONTEXT_URL_V3_IMS]: obCtx.CONTEXT_V3 })
        .addContext({ [x25519Ctx.constants.CONTEXT_URL]: x25519Ctx.contexts.get(x25519Ctx.constants.CONTEXT_URL) });
    return customLoaderProto;
}
export function addDidDocuments(customLoaderProto, preloadedDidDocuments) {
    preloadedDidDocuments.forEach((didDoc) => {
        customLoaderProto.addResolver({
            [didDoc.id]: {
                resolve: (_did) => __awaiter(this, void 0, void 0, function* () {
                    return didDoc;
                }),
            },
        });
    });
    return customLoaderProto;
}
export function getPreloadedAssertionMethods(preloadedDidDocuments) {
    const preloadedAssertionMethods = new Map();
    preloadedDidDocuments.forEach((didDoc) => {
        didDoc.assertionMethod.forEach((am) => {
            preloadedAssertionMethods.set(am.id, am);
        });
    });
    return preloadedAssertionMethods;
}
//# sourceMappingURL=common.js.map