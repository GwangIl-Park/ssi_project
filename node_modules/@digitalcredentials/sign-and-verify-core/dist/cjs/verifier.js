"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVerifier = exports.validatePresentation = exports.validateCredential = void 0;
const common_1 = require("./common");
const ed25519_signature_2020_1 = require("@digitalcredentials/ed25519-signature-2020");
const ed25519_verification_key_2020_1 = require("@digitalcredentials/ed25519-verification-key-2020");
const x25519_key_agreement_key_2020_1 = require("@digitalcredentials/x25519-key-agreement-key-2020");
const crypto_ld_1 = require("crypto-ld");
const vc = __importStar(require("@digitalcredentials/vc"));
const didWeb = __importStar(require("@interop/did-web-resolver"));
const didKey = __importStar(require("@digitalcredentials/did-method-key"));
// NOTE: This method is a simple and common issuer validation
// You may modify this method to suit the validation needs
// of your organization
exports.validateCredential = (verifiableCredential, issuerMembershipRegistry) => __awaiter(void 0, void 0, void 0, function* () {
    if (typeof verifiableCredential.issuer === 'object') {
        return issuerMembershipRegistry.hasOwnProperty(verifiableCredential.issuer.id);
    }
    return issuerMembershipRegistry.hasOwnProperty(verifiableCredential.issuer);
});
exports.validatePresentation = (verifiablePresentation, issuerMembershipRegistry) => __awaiter(void 0, void 0, void 0, function* () {
    if (!verifiablePresentation.verifiableCredential) {
        // presentation may omit credential
        return true;
    }
    if (Array.isArray(verifiablePresentation.verifiableCredential)) {
        return verifiablePresentation.verifiableCredential.every((credential) => {
            return exports.validateCredential(credential, issuerMembershipRegistry);
        });
    }
    return exports.validateCredential(verifiablePresentation.verifiableCredential, issuerMembershipRegistry);
});
exports.createVerifier = (preloadedDidDocuments) => {
    const cryptoLd = new crypto_ld_1.CryptoLD();
    cryptoLd.use(ed25519_verification_key_2020_1.Ed25519VerificationKey2020);
    cryptoLd.use(x25519_key_agreement_key_2020_1.X25519KeyAgreementKey2020);
    const didWebDriver = didWeb.driver({ cryptoLd });
    const didKeyDriver = didKey.driver();
    let customLoaderProto = common_1.getCustomLoader();
    customLoaderProto = common_1.addDidDocuments(customLoaderProto, preloadedDidDocuments);
    customLoaderProto.addResolver({
        ['did:web:']: {
            resolve: (_did) => __awaiter(void 0, void 0, void 0, function* () {
                return didWebDriver.get({ did: _did });
            }),
        },
        ['did:key:']: {
            resolve: (_did) => __awaiter(void 0, void 0, void 0, function* () {
                return didKeyDriver.get({ did: _did });
            }),
        },
    });
    let transmuteLoader = customLoaderProto.buildDocumentLoader();
    const preloadedAssertionMethods = common_1.getPreloadedAssertionMethods(preloadedDidDocuments);
    const customLoader = (url) => __awaiter(void 0, void 0, void 0, function* () {
        const result = preloadedAssertionMethods.get(url);
        if (result) {
            const document = Object.assign({ '@context': 'https://w3id.org/security/suites/ed25519-2020/v1' }, result);
            return {
                documentUrl: url,
                document
            };
        }
        return transmuteLoader(url);
    });
    function verify({ verifiableCredential, issuerMembershipRegistry, options }) {
        return __awaiter(this, void 0, void 0, function* () {
            // During verification, the public key is fetched via documentLoader,
            // so no key is necessary when creating the suite
            const suite = new ed25519_signature_2020_1.Ed25519Signature2020();
            try {
                const result = yield vc.verifyCredential({
                    credential: verifiableCredential,
                    documentLoader: customLoader,
                    suite
                });
                const verified = result.verified;
                const valid = yield exports.validateCredential(verifiableCredential, issuerMembershipRegistry);
                return Object.assign(Object.assign({}, result), { verified, valid });
            }
            catch (e) {
                console.error(e);
                throw e;
            }
        });
    }
    function verifyPresentation({ verifiablePresentation, issuerMembershipRegistry, options }) {
        return __awaiter(this, void 0, void 0, function* () {
            // During verification, the public key is fetched via documentLoader,
            // so no key is necessary when creating the suite
            const suite = new ed25519_signature_2020_1.Ed25519Signature2020();
            const toVerify = {
                presentation: Object.assign({}, verifiablePresentation),
                documentLoader: customLoader,
                suite: suite
            };
            if (options && options.challenge) {
                toVerify['challenge'] = options.challenge;
            }
            const result = yield vc.verify(toVerify);
            const verified = result.verified;
            const valid = yield exports.validatePresentation(verifiablePresentation, issuerMembershipRegistry);
            return Object.assign(Object.assign({}, result), { verified, valid });
        });
    }
    return {
        verify,
        verifyPresentation
    };
};
//# sourceMappingURL=verifier.js.map